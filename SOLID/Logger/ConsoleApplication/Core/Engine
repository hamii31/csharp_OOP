using Logger.ConsoleApp.Core.Interfaces;
using Logger.ConsoleApp.Factories;
using Logger.ConsoleApp.Factories.Interfaces;
using Logger.Core.Appenders.Interfaces;
using Logger.Core.ENums;
using Logger.Core.Formatting.Layouts.Interfaces;
using Logger.Core.IO;
using Logger.Core.IO.Interfaces;
using Logger.Core.Logging.Interfaces;
using Logger.Core.Logging;

namespace Logger.ConsoleApp.Core
{
    public class Engine : IEngine
    {
        private readonly ICollection<IAppender> appenders;
        private ILogger logger;

        private readonly ILayoutFactory layoutfactory;
        private readonly IAppenderFactory appenderfactory;
        public Engine()
        {
            appenders = new HashSet<IAppender>();

            layoutfactory = new LayoutFactory();
            appenderfactory = new AppenderFactory();
        }
        public void Run()
        {
            CreateAppenders();
            logger = new LoggerClass(this.appenders);
            LogMessages();
        }
        private void CreateAppenders()
        {
            try
            {
                int n = int.Parse(Console.ReadLine());
                for (int i = 0; i < n; i++)
                {
                    string[] appenderArgs = Console.ReadLine().Split(' ');
                    string appenderType = appenderArgs[0];
                    string layoutType = appenderArgs[1];

                    ILayout layout = layoutfactory.CreateLayout(layoutType);
                    ReportLevel reportLevel = ReportLevel.Info;
                    if (appenderArgs.Length == 3)
                    {
                        bool isReportLevelValid = Enum.TryParse<ReportLevel>(appenderArgs[2], true, out reportLevel);
                        if (!isReportLevelValid)
                        {
                            throw new InvalidOperationException("Report level is not valid");
                        }
                    }
                    IAppender appender;
                    if (appenderType == "FileAppender")
                    {
                        ILogFile logfile = new LogFile("log.xml", "../../../Logs");
                        appender = appenderfactory.CreateAppender(appenderType, layout, reportLevel, logfile);
                    }
                    else
                    {
                        appender = appenderfactory.CreateAppender(appenderType, layout, reportLevel);
                    }
                    appenders.Add(appender);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
        private void LogMessages()
        {
            string command;
            while ((command = Console.ReadLine()) != "END")
            {
                string[] cmdArgs = command.Split("|");
                string reportLevelstr = cmdArgs[0];
                string dateTime = cmdArgs[1];
                string message = cmdArgs[2];

                try
                {
                    switch (reportLevelstr)
                    {
                        case "INFO":
                            logger.Info(dateTime, message); break;
                        case "WARNING":
                            logger.Warn(dateTime, message); break;
                        case "ERROR":
                            logger.Error(dateTime, message); break;
                        case "CRITICAL":
                            logger.Critical(dateTime, message); break;
                        case "FATAL":
                            logger.Fatal(dateTime, message); break;
                        default:
                            break;
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
        }
    }
}
