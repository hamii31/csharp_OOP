using NUnit.Framework;
using System;

namespace Database.Test
{
    public class Tests
    {
        [Test]
        public void TestIfAnExceptionIsThrownIfArrayCapacityIsDifferentThanDefault()
        {
            Database data = new Database(1,2,3,4,5);
            Assert.Throws<InvalidOperationException>(() =>
            {
                for (int i = 0; i < data.Count; i++)
                {
                    data.Add(i);
                }
            });
        }
        [Test]
        public void TestIfAddMethodOfArrayThrowsExceptionIfItAddsMoreItemsThanDefaultArrayLength()
        {
            Database data = new Database();
            Assert.Throws<InvalidOperationException>(() => 
            {
                for (int i = 0; i < 17; i++)
                {
                    data.Add(i);
                }
            });
        }
        [Test]
        public void TestIfRemoveMethodOfArrayThrowsExceptionIfArrayIsEmpty()
        {
            Database data = new Database();
            Assert.Throws<InvalidOperationException>(() =>
            {
                data.Remove();
            });
        }
        [Test]
        public void CheckIfConstructorsTakeIntegersAndStoreThemInArray()
        {
            var n = 1;
            Database data = new Database(n);
            Assert.That(n is int, Is.True);
            Assert.That(data.Count is int, Is.True);
        }
        [Test]
        public void CheckIfFetchMethodReturnsArray()
        {
            Database data = new Database(1, 2, 3);
            var fetchedarray = data.Fetch();
            Assert.That(fetchedarray is int[], Is.True);
        }
    }
}
